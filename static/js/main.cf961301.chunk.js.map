{"version":3,"sources":["components/Main/Main.jsx","components/Registration/Registration.jsx","App.js","serviceWorker.js","index.js","components/Registration/Registration.module.css"],"names":["Main","Registration","props","className","style","registrationPage","formSignIn","src","alt","width","height","htmlFor","type","id","formControl","placeholder","required","autoFocus","value","href","App","to","path","render","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"iQAUeA,EARF,WACT,OAAQ,oCACJ,iDACA,6BACA,8C,gBCmCOC,EAtCM,SAACC,GAClB,OAAQ,yBAAKC,UAAS,sBAAkBC,IAAMC,mBAEtC,0BAAMF,UAAWC,IAAME,YACnB,yBAAKH,UAAU,OAAOI,IAAI,kBAAkBC,IAAI,GAAGC,MAAM,GAAGC,OAAO,KAEnE,wBAAIP,UAAU,8BAAd,sBAEA,2BAAOQ,QAAQ,aAAaR,UAAU,WAAtC,iBACA,2BAAOS,KAAK,QAAQC,GAAG,aAAaV,UAAS,uBAAkBC,IAAMU,aAAeC,YAAY,gBAAgBC,SAAS,GAClHC,UAAU,KAEV,2BAAON,QAAQ,gBAAgBR,UAAU,WAAzC,YACP,2BAAOS,KAAK,WAAWC,GAAG,gBAAgBV,UAAS,uBAAkBC,IAAMU,aAAeC,YAAY,WAAWC,SAAS,KAE1H,2BAAOL,QAAQ,iBAAiBR,UAAU,WAA1C,mBACA,2BAAOS,KAAK,WAAWC,GAAG,iBAAiBV,UAAS,uBAAkBC,IAAMU,aAAeC,YAAY,kBAAkBC,SAAS,KAGlI,2BAAOL,QAAQ,WAAWR,UAAU,WAApC,oBACA,2BAAOS,KAAK,MAAMC,GAAG,WAAWV,UAAS,uBAAkBC,IAAMU,aAAeC,YAAY,mBAAmBC,SAAS,KAExH,yBAAKb,UAAU,iBACX,+BACI,2BAAOS,KAAK,WAAWM,MAAM,gBADjC,kCAC+E,uBAC3EC,KAAM,kCADqE,oBAKnF,4BAAQhB,UAAU,mCAAmCS,KAAK,UAA1D,WAEA,uBAAGT,UAAU,wBAAb,2CCPDiB,MArBf,WACI,OACI,yBAAKjB,UAAU,OACX,kBAAC,IAAD,KAEI,yBAAKA,UAAW,UACZ,6BACI,kBAAC,IAAD,CAASkB,GAAI,SAAb,QACA,6BACA,kBAAC,IAAD,CAASA,GAAI,iBAAb,kBAIR,kBAAC,IAAD,CAAOC,KAAM,QAASC,OAAQ,kBAAO,kBAAC,EAAD,SACrC,kBAAC,IAAD,CAAOD,KAAM,gBAAiBC,OAAQ,kBAAO,kBAAC,EAAD,YCRzCC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASN,OAAO,kBAAC,EAAD,MAAQO,SAASC,eAAe,SD2H1C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB,kBElInBC,EAAOC,QAAU,CAAC,iBAAmB,uCAAuC,WAAa,iCAAiC,SAAW,+BAA+B,YAAc,qC","file":"static/js/main.cf961301.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Main = () => {\r\n    return (<>\r\n        <h3>This is main page</h3>\r\n        <br/>\r\n        <h1>Hello world!</h1>\r\n    </>)\r\n};\r\n\r\nexport default Main;","import React from 'react';\r\nimport style from './Registration.module.css';\r\n\r\nconst Registration = (props) => {\r\n    return (<div className= {`text-center ${style.registrationPage}`}>\r\n\r\n            <form className={style.formSignIn}>\r\n                <img className=\"mb-4\" src=\"Vprofi_logo.png\" alt=\"\" width=\"\" height=\"\"/>\r\n\r\n                <h1 className=\"h3 mb-3 font-weight-normal\">SIGN UP FOR VPROFI</h1>\r\n\r\n                <label htmlFor=\"inputEmail\" className=\"sr-only\">Email address</label>\r\n                <input type=\"email\" id=\"inputEmail\" className={`form-control ${style.formControl}`} placeholder=\"Email address\" required=\"\"\r\n                       autoFocus=\"\"/>\r\n\r\n                       <label htmlFor=\"inputPassword\" className=\"sr-only\">Password</label>\r\n                <input type=\"password\" id=\"inputPassword\" className={`form-control ${style.formControl}`} placeholder=\"Password\" required=\"\"/>\r\n\r\n                <label htmlFor=\"repeatPassword\" className=\"sr-only\">Repeat password</label>\r\n                <input type=\"password\" id=\"repeatPassword\" className={`form-control ${style.formControl}`} placeholder=\"Repeat password\" required=\"\"/>\r\n\r\n\r\n                <label htmlFor=\"telInput\" className=\"sr-only\">Telephone number</label>\r\n                <input type=\"tel\" id=\"telInput\" className={`form-control ${style.formControl}`} placeholder=\"Telephone number\" required=\"\"/>\r\n\r\n                <div className=\"checkbox mb-3\">\r\n                    <label>\r\n                        <input type=\"checkbox\" value=\"remember-me\"/> I agree with the terms of the <a\r\n                        href={'https://yandex.ru/legal/rules/'}>user agreement</a>\r\n                    </label>\r\n                </div>\r\n\r\n                <button className=\"btn btn-lg btn-success btn-block\" type=\"submit\">Sign in</button>\r\n\r\n                <p className=\"mt-5 mb-3 text-muted\">@VPROFI.RU 2019 All rights reserved </p>\r\n            </form>\r\n\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Registration;","import React from 'react';\nimport './App.css';\nimport {HashRouter, NavLink, Route} from 'react-router-dom';\nimport Main from './components/Main/Main';\nimport Registration from './components/Registration/Registration'\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <HashRouter >\n\n                <div className={\"navbar\"}>\n                    <nav>\n                        <NavLink to={'/main'}>Main</NavLink>\n                        <br/>\n                        <NavLink to={'/registration'}>Registration</NavLink>\n                    </nav>\n                </div>\n\n                <Route path={'/main'} render={() => (<Main/>)}/>\n                <Route path={'/registration'} render={() => (<Registration/>)}/>\n\n            </HashRouter >\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"registrationPage\":\"Registration_registrationPage__9Szk5\",\"formSignIn\":\"Registration_formSignIn__3mybK\",\"checkbox\":\"Registration_checkbox__30NLt\",\"formControl\":\"Registration_formControl__21oSA\"};"],"sourceRoot":""}